#!/usr/bin/env python
import sys,os
sys.path.append( os.getcwd() )
if len(sys.argv)>1 and ".py" in sys.argv[1]:
    sys.path.insert(0,os.getcwd()+ "/" + '/'.join( sys.argv[1].split('/')[:-1] ) )
import inspect,supy,configuration
############################################
def setupROOT() :
    sys.argv.append("-b")
    import ROOT as r
    configuration.initializeROOT(r, configuration.cppFiles())
    sys.argv.pop()
############################################
def moduleName(arg) :
    while "//" in arg : arg = arg.replace("//","/")
    module = arg.split('/')[-1].replace(".py",'')
    return module
############################################
def importedClass(module) :
    exec("import "+module)
    count = 0
    theClass = None
    for itemName in dir(eval(module)) :
        item=eval(module+"."+itemName)
        if not inspect.isclass(item) : continue        
        if issubclass(item, supy.analysis) and item is not supy.analysis :
            count+=1
            theClass = item
    assert count==1,arg+" needs exactly 1 class which inherits from analysis; it has "+str(count)
    assert module==theClass.__name__,"module name %s != class name %s"%(module, theClass.__name__)
    return theClass
############################################
def submitBatchJob(jobCmd, indexDict, subScript, jobScript, condorTemplate) :
    jobScriptFileName = "%(base)s/%(tag)s/%(sample)s/job%(iSlice)d.sh"%indexDict
    jobScriptDir = jobScriptFileName[:jobScriptFileName.rfind('/')]
    if not os.path.isdir(jobScriptDir): os.system("mkdir -p %s"%jobScriptDir)
    os.system("cp -p "+jobScript+" "+jobScriptFileName)
    os.system("chmod +x "+jobScriptFileName)
    with open(jobScriptFileName,"a") as file :
        print >>file
        for item in ["PYTHONPATH", "LD_LIBRARY_PATH"] :
            print >>file, "export %s=%s"%(item, os.environ[item])
        print >>file, "cd "+os.environ["PWD"]
        print >>file, jobCmd

    if os.path.exists(condorTemplate):
        condorFileName = jobScriptFileName.replace(".sh", ".condor")
        condorOutputSpec = "/".join([".",
                                     indexDict["analysis"],
                                     indexDict["tag"],
                                     "%s_%d_%d" % (indexDict["sample"],
                                                   indexDict["nSlices"],
                                                   indexDict["iSlice"],
                                                   ),
                                     "",
                                    ])
        pipes = " | ".join(["cat %s" % condorTemplate,
                            "sed s@JOBFLAG@%s@g" % jobScriptFileName,
                            "sed s@OUTFLAG@%s@g" % condorOutputSpec,
                            ])
        os.system(" > ".join([pipes, condorFileName]))
        arg = condorFileName
    else :
        arg = jobScriptFileName
    subCmd = "cd %s; %s %s" % (jobScriptDir, subScript, arg)
    os.system(subCmd)
############################################
def doBatch(someInstance) :
    argsAndOptions = sys.argv[1:]
    argsAndOptions.remove("--batch")
    baseCmd = supy.whereami()+"/bin/supy "+" ".join(argsAndOptions)

    subScript,jobScript,condorTemplate = supy.sites.batchScripts()
    os.system("chmod +x %s/%s"%(supy.whereami(),subScript))

    site = supy.sites.prefix()

    scriptDir = someInstance.globalStem
    os.system("mkdir -p "+scriptDir)

    args = []
    for conf in someInstance.configurations :
        for looper in someInstance.listsOfLoopers[conf['tag']] :
            os.system("mkdir -p %s/%s/%s"%(scriptDir,conf['tag'], looper.name))
            nSlices = int(options.slices)
            for iSlice in range(nSlices):
                listOfIndices = {"base": scriptDir,
                                 "tag": conf['tag'],
                                 "analysis": someInstance.name,
                                 "sample": looper.name,
                                 "nSlices": nSlices,
                                 "iSlice": iSlice,
                                 "site": site,
                                 }
                args.append( (baseCmd + " --site %(site)s --jobid %(iSlice)d --tag '%(tag)s' --sample %(sample)s"%listOfIndices,
                              listOfIndices, supy.whereami()+'/'+subScript, supy.whereami()+'/'+jobScript, supy.whereami()+'/'+condorTemplate) )
    supy.utils.operateOnListUsingQueue(configuration.nCoresDefault(), supy.utils.qWorker(submitBatchJob), args)
############################################
        
# get options
options,arg = supy.options.opts()

# set up ROOT
setupROOT()

# generate dictionaries
supy.utils.generateDictionaries(inList = configuration.cppROOTDictionariesToGenerate(), dir = supy.whereami())

# construct the analysis
anInstance = importedClass(moduleName(arg))(options)

if options.batch : #make one script per job and submit them to the queue
    doBatch(anInstance)
elif options.loop!=None : #loop over the events
    anInstance.loop()

# merge output and conclude
if options.jobId==None and not options.batch :
    try:
        anInstance.mergeAllOutput()
        anInstance.manageSecondaries(options.update,options.report,options.reports)
        if options.update==None and options.report==None and options.reports==None:
            anInstance.concludeAll()
    except AssertionError as foo:
        print
        print foo
        #print "Have you looped?"
############################################
